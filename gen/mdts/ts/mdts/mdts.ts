// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "mdts/mdts.proto" (package "mdts", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message mdts.User
 */
export interface User {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: bytes passwordhash = 3;
     */
    passwordhash: Uint8Array;
    /**
     * @generated from protobuf field: int64 role = 4;
     */
    role: bigint;
}
/**
 * @generated from protobuf message mdts.Alert
 */
export interface Alert {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 2;
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp time = 3;
     */
    time?: Timestamp;
    /**
     * @generated from protobuf field: int64 bpla_id = 4;
     */
    bplaId: bigint;
    /**
     * @generated from protobuf field: float latitude = 5;
     */
    latitude: number;
    /**
     * @generated from protobuf field: float longitude = 6;
     */
    longitude: number;
}
/**
 * @generated from protobuf message mdts.Bpla
 */
export interface Bpla {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string brand = 2;
     */
    brand: string;
    /**
     * @generated from protobuf field: string model = 3;
     */
    model: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp entrydate = 4;
     */
    entrydate?: Timestamp;
    /**
     * @generated from protobuf field: bool inusage = 5;
     */
    inusage: boolean;
}
/**
 * @generated from protobuf message mdts.CreateAlertRequest
 */
export interface CreateAlertRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 1;
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp time = 2;
     */
    time?: Timestamp;
    /**
     * @generated from protobuf field: int64 bpla_id = 3;
     */
    bplaId: bigint;
    /**
     * @generated from protobuf field: float latitude = 4;
     */
    latitude: number;
    /**
     * @generated from protobuf field: float longitude = 5;
     */
    longitude: number;
}
/**
 * @generated from protobuf message mdts.GetAlertsByPeriodRequest
 */
export interface GetAlertsByPeriodRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start_date = 1;
     */
    startDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end_date = 2;
     */
    endDate?: Timestamp;
}
/**
 * @generated from protobuf message mdts.CreateBplaRequest
 */
export interface CreateBplaRequest {
    /**
     * @generated from protobuf field: string brand = 1;
     */
    brand: string;
    /**
     * @generated from protobuf field: string model = 2;
     */
    model: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp entrydate = 3;
     */
    entrydate?: Timestamp;
    /**
     * @generated from protobuf field: bool inusage = 4;
     */
    inusage: boolean;
}
/**
 * @generated from protobuf message mdts.GetUserByIdRequest
 */
export interface GetUserByIdRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mdts.GetUserByUsernameRequest
 */
export interface GetUserByUsernameRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated from protobuf message mdts.GetAllUsersRequest
 */
export interface GetAllUsersRequest {
}
/**
 * @generated from protobuf message mdts.UpdateUserParams
 */
export interface UpdateUserParams {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: bytes passwordhash = 3;
     */
    passwordhash: Uint8Array;
    /**
     * @generated from protobuf field: int64 role = 4;
     */
    role: bigint;
}
/**
 * @generated from protobuf message mdts.UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * @generated from protobuf field: mdts.UpdateUserParams updateuserparams = 1;
     */
    updateuserparams?: UpdateUserParams;
}
/**
 * @generated from protobuf message mdts.DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mdts.UserResponse
 */
export interface UserResponse {
    /**
     * @generated from protobuf field: mdts.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message mdts.UsersResponse
 */
export interface UsersResponse {
    /**
     * @generated from protobuf field: repeated mdts.User user = 1;
     */
    user: User[];
}
/**
 * @generated from protobuf message mdts.UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message mdts.DeleteUserResponse
 */
export interface DeleteUserResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message mdts.GetAlertByIdRequest
 */
export interface GetAlertByIdRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mdts.GetAlertByUsernameRequest
 */
export interface GetAlertByUsernameRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated from protobuf message mdts.GetAllAlertsRequest
 */
export interface GetAllAlertsRequest {
}
/**
 * @generated from protobuf message mdts.UpdateAlertParams
 */
export interface UpdateAlertParams {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp date = 2;
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp time = 3;
     */
    time?: Timestamp;
    /**
     * @generated from protobuf field: int64 bpla_id = 4;
     */
    bplaId: bigint;
    /**
     * @generated from protobuf field: float latitude = 5;
     */
    latitude: number;
    /**
     * @generated from protobuf field: float longitude = 6;
     */
    longitude: number;
}
/**
 * @generated from protobuf message mdts.UpdateAlertRequest
 */
export interface UpdateAlertRequest {
    /**
     * @generated from protobuf field: mdts.UpdateAlertParams updatealertparams = 1;
     */
    updatealertparams?: UpdateAlertParams;
}
/**
 * @generated from protobuf message mdts.DeleteAlertRequest
 */
export interface DeleteAlertRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mdts.AlertResponse
 */
export interface AlertResponse {
    /**
     * @generated from protobuf field: mdts.Alert alert = 1;
     */
    alert?: Alert;
}
/**
 * @generated from protobuf message mdts.AlertsResponse
 */
export interface AlertsResponse {
    /**
     * @generated from protobuf field: repeated mdts.Alert alert = 1;
     */
    alert: Alert[];
}
/**
 * @generated from protobuf message mdts.UpdateAlertResponse
 */
export interface UpdateAlertResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message mdts.DeleteAlertResponse
 */
export interface DeleteAlertResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message mdts.GetBplaByIdRequest
 */
export interface GetBplaByIdRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mdts.GetBplaByUsernameRequest
 */
export interface GetBplaByUsernameRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated from protobuf message mdts.GetAllBplasRequest
 */
export interface GetAllBplasRequest {
}
/**
 * @generated from protobuf message mdts.GetBplaByModelAndBrandRequest
 */
export interface GetBplaByModelAndBrandRequest {
    /**
     * @generated from protobuf field: string brand = 1;
     */
    brand: string;
    /**
     * @generated from protobuf field: string model = 2;
     */
    model: string;
}
/**
 * @generated from protobuf message mdts.GetBplaByEntryDateRangeRequest
 */
export interface GetBplaByEntryDateRangeRequest {
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start_date = 1;
     */
    startDate?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end_date = 2;
     */
    endDate?: Timestamp;
}
/**
 * @generated from protobuf message mdts.GetBplaByInUsageRequest
 */
export interface GetBplaByInUsageRequest {
    /**
     * @generated from protobuf field: bool in_usage = 1;
     */
    inUsage: boolean;
}
/**
 * @generated from protobuf message mdts.UpdateBplaParams
 */
export interface UpdateBplaParams {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
    /**
     * @generated from protobuf field: string brand = 2;
     */
    brand: string;
    /**
     * @generated from protobuf field: string model = 3;
     */
    model: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp entrydate = 4;
     */
    entrydate?: Timestamp;
    /**
     * @generated from protobuf field: bool inusage = 5;
     */
    inusage: boolean;
}
/**
 * @generated from protobuf message mdts.UpdateBplaRequest
 */
export interface UpdateBplaRequest {
    /**
     * @generated from protobuf field: mdts.UpdateBplaParams updatebplaparams = 1;
     */
    updatebplaparams?: UpdateBplaParams;
}
/**
 * @generated from protobuf message mdts.DeleteBplaRequest
 */
export interface DeleteBplaRequest {
    /**
     * @generated from protobuf field: int64 id = 1;
     */
    id: bigint;
}
/**
 * @generated from protobuf message mdts.BplaResponse
 */
export interface BplaResponse {
    /**
     * @generated from protobuf field: mdts.Bpla bpla = 1;
     */
    bpla?: Bpla;
}
/**
 * @generated from protobuf message mdts.BplasResponse
 */
export interface BplasResponse {
    /**
     * @generated from protobuf field: repeated mdts.Bpla bpla = 1;
     */
    bpla: Bpla[];
}
/**
 * @generated from protobuf message mdts.UpdateBplaResponse
 */
export interface UpdateBplaResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
/**
 * @generated from protobuf message mdts.DeleteBplaResponse
 */
export interface DeleteBplaResponse {
    /**
     * @generated from protobuf field: string error = 1;
     */
    error: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("mdts.User", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "passwordhash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "role", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.username = "";
        message.passwordhash = new Uint8Array(0);
        message.role = 0n;
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* bytes passwordhash */ 3:
                    message.passwordhash = reader.bytes();
                    break;
                case /* int64 role */ 4:
                    message.role = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* bytes passwordhash = 3; */
        if (message.passwordhash.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.passwordhash);
        /* int64 role = 4; */
        if (message.role !== 0n)
            writer.tag(4, WireType.Varint).int64(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Alert$Type extends MessageType<Alert> {
    constructor() {
        super("mdts.Alert", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date", kind: "message", T: () => Timestamp },
            { no: 3, name: "time", kind: "message", T: () => Timestamp },
            { no: 4, name: "bpla_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "latitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "longitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Alert>): Alert {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.bplaId = 0n;
        message.latitude = 0;
        message.longitude = 0;
        if (value !== undefined)
            reflectionMergePartial<Alert>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Alert): Alert {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp date */ 2:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* google.protobuf.Timestamp time */ 3:
                    message.time = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                case /* int64 bpla_id */ 4:
                    message.bplaId = reader.int64().toBigInt();
                    break;
                case /* float latitude */ 5:
                    message.latitude = reader.float();
                    break;
                case /* float longitude */ 6:
                    message.longitude = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Alert, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* google.protobuf.Timestamp date = 2; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp time = 3; */
        if (message.time)
            Timestamp.internalBinaryWrite(message.time, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 bpla_id = 4; */
        if (message.bplaId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.bplaId);
        /* float latitude = 5; */
        if (message.latitude !== 0)
            writer.tag(5, WireType.Bit32).float(message.latitude);
        /* float longitude = 6; */
        if (message.longitude !== 0)
            writer.tag(6, WireType.Bit32).float(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.Alert
 */
export const Alert = new Alert$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bpla$Type extends MessageType<Bpla> {
    constructor() {
        super("mdts.Bpla", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "brand", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "entrydate", kind: "message", T: () => Timestamp },
            { no: 5, name: "inusage", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Bpla>): Bpla {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.brand = "";
        message.model = "";
        message.inusage = false;
        if (value !== undefined)
            reflectionMergePartial<Bpla>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bpla): Bpla {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string brand */ 2:
                    message.brand = reader.string();
                    break;
                case /* string model */ 3:
                    message.model = reader.string();
                    break;
                case /* google.protobuf.Timestamp entrydate */ 4:
                    message.entrydate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.entrydate);
                    break;
                case /* bool inusage */ 5:
                    message.inusage = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bpla, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string brand = 2; */
        if (message.brand !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.brand);
        /* string model = 3; */
        if (message.model !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.model);
        /* google.protobuf.Timestamp entrydate = 4; */
        if (message.entrydate)
            Timestamp.internalBinaryWrite(message.entrydate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool inusage = 5; */
        if (message.inusage !== false)
            writer.tag(5, WireType.Varint).bool(message.inusage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.Bpla
 */
export const Bpla = new Bpla$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAlertRequest$Type extends MessageType<CreateAlertRequest> {
    constructor() {
        super("mdts.CreateAlertRequest", [
            { no: 1, name: "date", kind: "message", T: () => Timestamp },
            { no: 2, name: "time", kind: "message", T: () => Timestamp },
            { no: 3, name: "bpla_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "latitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "longitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAlertRequest>): CreateAlertRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bplaId = 0n;
        message.latitude = 0;
        message.longitude = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateAlertRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAlertRequest): CreateAlertRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp date */ 1:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* google.protobuf.Timestamp time */ 2:
                    message.time = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                case /* int64 bpla_id */ 3:
                    message.bplaId = reader.int64().toBigInt();
                    break;
                case /* float latitude */ 4:
                    message.latitude = reader.float();
                    break;
                case /* float longitude */ 5:
                    message.longitude = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAlertRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp date = 1; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp time = 2; */
        if (message.time)
            Timestamp.internalBinaryWrite(message.time, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 bpla_id = 3; */
        if (message.bplaId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.bplaId);
        /* float latitude = 4; */
        if (message.latitude !== 0)
            writer.tag(4, WireType.Bit32).float(message.latitude);
        /* float longitude = 5; */
        if (message.longitude !== 0)
            writer.tag(5, WireType.Bit32).float(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.CreateAlertRequest
 */
export const CreateAlertRequest = new CreateAlertRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAlertsByPeriodRequest$Type extends MessageType<GetAlertsByPeriodRequest> {
    constructor() {
        super("mdts.GetAlertsByPeriodRequest", [
            { no: 1, name: "start_date", kind: "message", T: () => Timestamp },
            { no: 2, name: "end_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetAlertsByPeriodRequest>): GetAlertsByPeriodRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAlertsByPeriodRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAlertsByPeriodRequest): GetAlertsByPeriodRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp start_date */ 1:
                    message.startDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startDate);
                    break;
                case /* google.protobuf.Timestamp end_date */ 2:
                    message.endDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAlertsByPeriodRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp start_date = 1; */
        if (message.startDate)
            Timestamp.internalBinaryWrite(message.startDate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end_date = 2; */
        if (message.endDate)
            Timestamp.internalBinaryWrite(message.endDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetAlertsByPeriodRequest
 */
export const GetAlertsByPeriodRequest = new GetAlertsByPeriodRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBplaRequest$Type extends MessageType<CreateBplaRequest> {
    constructor() {
        super("mdts.CreateBplaRequest", [
            { no: 1, name: "brand", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "entrydate", kind: "message", T: () => Timestamp },
            { no: 4, name: "inusage", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBplaRequest>): CreateBplaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brand = "";
        message.model = "";
        message.inusage = false;
        if (value !== undefined)
            reflectionMergePartial<CreateBplaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBplaRequest): CreateBplaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string brand */ 1:
                    message.brand = reader.string();
                    break;
                case /* string model */ 2:
                    message.model = reader.string();
                    break;
                case /* google.protobuf.Timestamp entrydate */ 3:
                    message.entrydate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.entrydate);
                    break;
                case /* bool inusage */ 4:
                    message.inusage = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBplaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string brand = 1; */
        if (message.brand !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brand);
        /* string model = 2; */
        if (message.model !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.model);
        /* google.protobuf.Timestamp entrydate = 3; */
        if (message.entrydate)
            Timestamp.internalBinaryWrite(message.entrydate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool inusage = 4; */
        if (message.inusage !== false)
            writer.tag(4, WireType.Varint).bool(message.inusage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.CreateBplaRequest
 */
export const CreateBplaRequest = new CreateBplaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserByIdRequest$Type extends MessageType<GetUserByIdRequest> {
    constructor() {
        super("mdts.GetUserByIdRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserByIdRequest>): GetUserByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetUserByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserByIdRequest): GetUserByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetUserByIdRequest
 */
export const GetUserByIdRequest = new GetUserByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserByUsernameRequest$Type extends MessageType<GetUserByUsernameRequest> {
    constructor() {
        super("mdts.GetUserByUsernameRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserByUsernameRequest>): GetUserByUsernameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserByUsernameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserByUsernameRequest): GetUserByUsernameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserByUsernameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetUserByUsernameRequest
 */
export const GetUserByUsernameRequest = new GetUserByUsernameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllUsersRequest$Type extends MessageType<GetAllUsersRequest> {
    constructor() {
        super("mdts.GetAllUsersRequest", []);
    }
    create(value?: PartialMessage<GetAllUsersRequest>): GetAllUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllUsersRequest): GetAllUsersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetAllUsersRequest
 */
export const GetAllUsersRequest = new GetAllUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserParams$Type extends MessageType<UpdateUserParams> {
    constructor() {
        super("mdts.UpdateUserParams", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "passwordhash", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "role", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserParams>): UpdateUserParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.username = "";
        message.passwordhash = new Uint8Array(0);
        message.role = 0n;
        if (value !== undefined)
            reflectionMergePartial<UpdateUserParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserParams): UpdateUserParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                case /* bytes passwordhash */ 3:
                    message.passwordhash = reader.bytes();
                    break;
                case /* int64 role */ 4:
                    message.role = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* bytes passwordhash = 3; */
        if (message.passwordhash.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.passwordhash);
        /* int64 role = 4; */
        if (message.role !== 0n)
            writer.tag(4, WireType.Varint).int64(message.role);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateUserParams
 */
export const UpdateUserParams = new UpdateUserParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRequest$Type extends MessageType<UpdateUserRequest> {
    constructor() {
        super("mdts.UpdateUserRequest", [
            { no: 1, name: "updateuserparams", kind: "message", T: () => UpdateUserParams }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRequest>): UpdateUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRequest): UpdateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mdts.UpdateUserParams updateuserparams */ 1:
                    message.updateuserparams = UpdateUserParams.internalBinaryRead(reader, reader.uint32(), options, message.updateuserparams);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mdts.UpdateUserParams updateuserparams = 1; */
        if (message.updateuserparams)
            UpdateUserParams.internalBinaryWrite(message.updateuserparams, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateUserRequest
 */
export const UpdateUserRequest = new UpdateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("mdts.DeleteUserRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserResponse$Type extends MessageType<UserResponse> {
    constructor() {
        super("mdts.UserResponse", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UserResponse>): UserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserResponse): UserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mdts.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mdts.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UserResponse
 */
export const UserResponse = new UserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UsersResponse$Type extends MessageType<UsersResponse> {
    constructor() {
        super("mdts.UsersResponse", [
            { no: 1, name: "user", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<UsersResponse>): UsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.user = [];
        if (value !== undefined)
            reflectionMergePartial<UsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UsersResponse): UsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mdts.User user */ 1:
                    message.user.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mdts.User user = 1; */
        for (let i = 0; i < message.user.length; i++)
            User.internalBinaryWrite(message.user[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UsersResponse
 */
export const UsersResponse = new UsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserResponse$Type extends MessageType<UpdateUserResponse> {
    constructor() {
        super("mdts.UpdateUserResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateUserResponse>): UpdateUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserResponse): UpdateUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateUserResponse
 */
export const UpdateUserResponse = new UpdateUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserResponse$Type extends MessageType<DeleteUserResponse> {
    constructor() {
        super("mdts.DeleteUserResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserResponse>): DeleteUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserResponse): DeleteUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.DeleteUserResponse
 */
export const DeleteUserResponse = new DeleteUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAlertByIdRequest$Type extends MessageType<GetAlertByIdRequest> {
    constructor() {
        super("mdts.GetAlertByIdRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetAlertByIdRequest>): GetAlertByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetAlertByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAlertByIdRequest): GetAlertByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAlertByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetAlertByIdRequest
 */
export const GetAlertByIdRequest = new GetAlertByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAlertByUsernameRequest$Type extends MessageType<GetAlertByUsernameRequest> {
    constructor() {
        super("mdts.GetAlertByUsernameRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAlertByUsernameRequest>): GetAlertByUsernameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        if (value !== undefined)
            reflectionMergePartial<GetAlertByUsernameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAlertByUsernameRequest): GetAlertByUsernameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAlertByUsernameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetAlertByUsernameRequest
 */
export const GetAlertByUsernameRequest = new GetAlertByUsernameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllAlertsRequest$Type extends MessageType<GetAllAlertsRequest> {
    constructor() {
        super("mdts.GetAllAlertsRequest", []);
    }
    create(value?: PartialMessage<GetAllAlertsRequest>): GetAllAlertsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllAlertsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllAlertsRequest): GetAllAlertsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllAlertsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetAllAlertsRequest
 */
export const GetAllAlertsRequest = new GetAllAlertsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAlertParams$Type extends MessageType<UpdateAlertParams> {
    constructor() {
        super("mdts.UpdateAlertParams", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "date", kind: "message", T: () => Timestamp },
            { no: 3, name: "time", kind: "message", T: () => Timestamp },
            { no: 4, name: "bpla_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "latitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "longitude", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAlertParams>): UpdateAlertParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.bplaId = 0n;
        message.latitude = 0;
        message.longitude = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateAlertParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAlertParams): UpdateAlertParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* google.protobuf.Timestamp date */ 2:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* google.protobuf.Timestamp time */ 3:
                    message.time = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                case /* int64 bpla_id */ 4:
                    message.bplaId = reader.int64().toBigInt();
                    break;
                case /* float latitude */ 5:
                    message.latitude = reader.float();
                    break;
                case /* float longitude */ 6:
                    message.longitude = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAlertParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* google.protobuf.Timestamp date = 2; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp time = 3; */
        if (message.time)
            Timestamp.internalBinaryWrite(message.time, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 bpla_id = 4; */
        if (message.bplaId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.bplaId);
        /* float latitude = 5; */
        if (message.latitude !== 0)
            writer.tag(5, WireType.Bit32).float(message.latitude);
        /* float longitude = 6; */
        if (message.longitude !== 0)
            writer.tag(6, WireType.Bit32).float(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateAlertParams
 */
export const UpdateAlertParams = new UpdateAlertParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAlertRequest$Type extends MessageType<UpdateAlertRequest> {
    constructor() {
        super("mdts.UpdateAlertRequest", [
            { no: 1, name: "updatealertparams", kind: "message", T: () => UpdateAlertParams }
        ]);
    }
    create(value?: PartialMessage<UpdateAlertRequest>): UpdateAlertRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateAlertRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAlertRequest): UpdateAlertRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mdts.UpdateAlertParams updatealertparams */ 1:
                    message.updatealertparams = UpdateAlertParams.internalBinaryRead(reader, reader.uint32(), options, message.updatealertparams);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAlertRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mdts.UpdateAlertParams updatealertparams = 1; */
        if (message.updatealertparams)
            UpdateAlertParams.internalBinaryWrite(message.updatealertparams, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateAlertRequest
 */
export const UpdateAlertRequest = new UpdateAlertRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAlertRequest$Type extends MessageType<DeleteAlertRequest> {
    constructor() {
        super("mdts.DeleteAlertRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAlertRequest>): DeleteAlertRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteAlertRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAlertRequest): DeleteAlertRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAlertRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.DeleteAlertRequest
 */
export const DeleteAlertRequest = new DeleteAlertRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlertResponse$Type extends MessageType<AlertResponse> {
    constructor() {
        super("mdts.AlertResponse", [
            { no: 1, name: "alert", kind: "message", T: () => Alert }
        ]);
    }
    create(value?: PartialMessage<AlertResponse>): AlertResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AlertResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlertResponse): AlertResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mdts.Alert alert */ 1:
                    message.alert = Alert.internalBinaryRead(reader, reader.uint32(), options, message.alert);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlertResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mdts.Alert alert = 1; */
        if (message.alert)
            Alert.internalBinaryWrite(message.alert, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.AlertResponse
 */
export const AlertResponse = new AlertResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AlertsResponse$Type extends MessageType<AlertsResponse> {
    constructor() {
        super("mdts.AlertsResponse", [
            { no: 1, name: "alert", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Alert }
        ]);
    }
    create(value?: PartialMessage<AlertsResponse>): AlertsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.alert = [];
        if (value !== undefined)
            reflectionMergePartial<AlertsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AlertsResponse): AlertsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mdts.Alert alert */ 1:
                    message.alert.push(Alert.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AlertsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mdts.Alert alert = 1; */
        for (let i = 0; i < message.alert.length; i++)
            Alert.internalBinaryWrite(message.alert[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.AlertsResponse
 */
export const AlertsResponse = new AlertsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAlertResponse$Type extends MessageType<UpdateAlertResponse> {
    constructor() {
        super("mdts.UpdateAlertResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAlertResponse>): UpdateAlertResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateAlertResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAlertResponse): UpdateAlertResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAlertResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateAlertResponse
 */
export const UpdateAlertResponse = new UpdateAlertResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAlertResponse$Type extends MessageType<DeleteAlertResponse> {
    constructor() {
        super("mdts.DeleteAlertResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAlertResponse>): DeleteAlertResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteAlertResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAlertResponse): DeleteAlertResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAlertResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.DeleteAlertResponse
 */
export const DeleteAlertResponse = new DeleteAlertResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBplaByIdRequest$Type extends MessageType<GetBplaByIdRequest> {
    constructor() {
        super("mdts.GetBplaByIdRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetBplaByIdRequest>): GetBplaByIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetBplaByIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBplaByIdRequest): GetBplaByIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBplaByIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetBplaByIdRequest
 */
export const GetBplaByIdRequest = new GetBplaByIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBplaByUsernameRequest$Type extends MessageType<GetBplaByUsernameRequest> {
    constructor() {
        super("mdts.GetBplaByUsernameRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBplaByUsernameRequest>): GetBplaByUsernameRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.username = "";
        if (value !== undefined)
            reflectionMergePartial<GetBplaByUsernameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBplaByUsernameRequest): GetBplaByUsernameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBplaByUsernameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetBplaByUsernameRequest
 */
export const GetBplaByUsernameRequest = new GetBplaByUsernameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllBplasRequest$Type extends MessageType<GetAllBplasRequest> {
    constructor() {
        super("mdts.GetAllBplasRequest", []);
    }
    create(value?: PartialMessage<GetAllBplasRequest>): GetAllBplasRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetAllBplasRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllBplasRequest): GetAllBplasRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllBplasRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetAllBplasRequest
 */
export const GetAllBplasRequest = new GetAllBplasRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBplaByModelAndBrandRequest$Type extends MessageType<GetBplaByModelAndBrandRequest> {
    constructor() {
        super("mdts.GetBplaByModelAndBrandRequest", [
            { no: 1, name: "brand", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBplaByModelAndBrandRequest>): GetBplaByModelAndBrandRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brand = "";
        message.model = "";
        if (value !== undefined)
            reflectionMergePartial<GetBplaByModelAndBrandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBplaByModelAndBrandRequest): GetBplaByModelAndBrandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string brand */ 1:
                    message.brand = reader.string();
                    break;
                case /* string model */ 2:
                    message.model = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBplaByModelAndBrandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string brand = 1; */
        if (message.brand !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.brand);
        /* string model = 2; */
        if (message.model !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.model);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetBplaByModelAndBrandRequest
 */
export const GetBplaByModelAndBrandRequest = new GetBplaByModelAndBrandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBplaByEntryDateRangeRequest$Type extends MessageType<GetBplaByEntryDateRangeRequest> {
    constructor() {
        super("mdts.GetBplaByEntryDateRangeRequest", [
            { no: 1, name: "start_date", kind: "message", T: () => Timestamp },
            { no: 2, name: "end_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<GetBplaByEntryDateRangeRequest>): GetBplaByEntryDateRangeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBplaByEntryDateRangeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBplaByEntryDateRangeRequest): GetBplaByEntryDateRangeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp start_date */ 1:
                    message.startDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startDate);
                    break;
                case /* google.protobuf.Timestamp end_date */ 2:
                    message.endDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBplaByEntryDateRangeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp start_date = 1; */
        if (message.startDate)
            Timestamp.internalBinaryWrite(message.startDate, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp end_date = 2; */
        if (message.endDate)
            Timestamp.internalBinaryWrite(message.endDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetBplaByEntryDateRangeRequest
 */
export const GetBplaByEntryDateRangeRequest = new GetBplaByEntryDateRangeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBplaByInUsageRequest$Type extends MessageType<GetBplaByInUsageRequest> {
    constructor() {
        super("mdts.GetBplaByInUsageRequest", [
            { no: 1, name: "in_usage", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetBplaByInUsageRequest>): GetBplaByInUsageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.inUsage = false;
        if (value !== undefined)
            reflectionMergePartial<GetBplaByInUsageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBplaByInUsageRequest): GetBplaByInUsageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool in_usage */ 1:
                    message.inUsage = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBplaByInUsageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool in_usage = 1; */
        if (message.inUsage !== false)
            writer.tag(1, WireType.Varint).bool(message.inUsage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.GetBplaByInUsageRequest
 */
export const GetBplaByInUsageRequest = new GetBplaByInUsageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBplaParams$Type extends MessageType<UpdateBplaParams> {
    constructor() {
        super("mdts.UpdateBplaParams", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "brand", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "model", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "entrydate", kind: "message", T: () => Timestamp },
            { no: 5, name: "inusage", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateBplaParams>): UpdateBplaParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.brand = "";
        message.model = "";
        message.inusage = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateBplaParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBplaParams): UpdateBplaParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* string brand */ 2:
                    message.brand = reader.string();
                    break;
                case /* string model */ 3:
                    message.model = reader.string();
                    break;
                case /* google.protobuf.Timestamp entrydate */ 4:
                    message.entrydate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.entrydate);
                    break;
                case /* bool inusage */ 5:
                    message.inusage = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBplaParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string brand = 2; */
        if (message.brand !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.brand);
        /* string model = 3; */
        if (message.model !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.model);
        /* google.protobuf.Timestamp entrydate = 4; */
        if (message.entrydate)
            Timestamp.internalBinaryWrite(message.entrydate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool inusage = 5; */
        if (message.inusage !== false)
            writer.tag(5, WireType.Varint).bool(message.inusage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateBplaParams
 */
export const UpdateBplaParams = new UpdateBplaParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBplaRequest$Type extends MessageType<UpdateBplaRequest> {
    constructor() {
        super("mdts.UpdateBplaRequest", [
            { no: 1, name: "updatebplaparams", kind: "message", T: () => UpdateBplaParams }
        ]);
    }
    create(value?: PartialMessage<UpdateBplaRequest>): UpdateBplaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateBplaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBplaRequest): UpdateBplaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mdts.UpdateBplaParams updatebplaparams */ 1:
                    message.updatebplaparams = UpdateBplaParams.internalBinaryRead(reader, reader.uint32(), options, message.updatebplaparams);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBplaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mdts.UpdateBplaParams updatebplaparams = 1; */
        if (message.updatebplaparams)
            UpdateBplaParams.internalBinaryWrite(message.updatebplaparams, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateBplaRequest
 */
export const UpdateBplaRequest = new UpdateBplaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteBplaRequest$Type extends MessageType<DeleteBplaRequest> {
    constructor() {
        super("mdts.DeleteBplaRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteBplaRequest>): DeleteBplaRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteBplaRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteBplaRequest): DeleteBplaRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteBplaRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.DeleteBplaRequest
 */
export const DeleteBplaRequest = new DeleteBplaRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BplaResponse$Type extends MessageType<BplaResponse> {
    constructor() {
        super("mdts.BplaResponse", [
            { no: 1, name: "bpla", kind: "message", T: () => Bpla }
        ]);
    }
    create(value?: PartialMessage<BplaResponse>): BplaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BplaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BplaResponse): BplaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mdts.Bpla bpla */ 1:
                    message.bpla = Bpla.internalBinaryRead(reader, reader.uint32(), options, message.bpla);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BplaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mdts.Bpla bpla = 1; */
        if (message.bpla)
            Bpla.internalBinaryWrite(message.bpla, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.BplaResponse
 */
export const BplaResponse = new BplaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BplasResponse$Type extends MessageType<BplasResponse> {
    constructor() {
        super("mdts.BplasResponse", [
            { no: 1, name: "bpla", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Bpla }
        ]);
    }
    create(value?: PartialMessage<BplasResponse>): BplasResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bpla = [];
        if (value !== undefined)
            reflectionMergePartial<BplasResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BplasResponse): BplasResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mdts.Bpla bpla */ 1:
                    message.bpla.push(Bpla.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BplasResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mdts.Bpla bpla = 1; */
        for (let i = 0; i < message.bpla.length; i++)
            Bpla.internalBinaryWrite(message.bpla[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.BplasResponse
 */
export const BplasResponse = new BplasResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateBplaResponse$Type extends MessageType<UpdateBplaResponse> {
    constructor() {
        super("mdts.UpdateBplaResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateBplaResponse>): UpdateBplaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateBplaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateBplaResponse): UpdateBplaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateBplaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.UpdateBplaResponse
 */
export const UpdateBplaResponse = new UpdateBplaResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteBplaResponse$Type extends MessageType<DeleteBplaResponse> {
    constructor() {
        super("mdts.DeleteBplaResponse", [
            { no: 1, name: "error", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteBplaResponse>): DeleteBplaResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteBplaResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteBplaResponse): DeleteBplaResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error */ 1:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteBplaResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error = 1; */
        if (message.error !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mdts.DeleteBplaResponse
 */
export const DeleteBplaResponse = new DeleteBplaResponse$Type();
/**
 * @generated ServiceType for protobuf service mdts.UserService
 */
export const UserService = new ServiceType("mdts.UserService", [
    { name: "GetById", options: {}, I: GetUserByIdRequest, O: UserResponse },
    { name: "GetByUsername", options: {}, I: GetUserByUsernameRequest, O: UserResponse },
    { name: "GetAll", options: {}, I: GetAllUsersRequest, O: UsersResponse },
    { name: "Update", options: {}, I: UpdateUserRequest, O: UpdateUserResponse },
    { name: "Delete", options: {}, I: DeleteUserRequest, O: DeleteUserResponse }
]);
/**
 * @generated ServiceType for protobuf service mdts.AlertService
 */
export const AlertService = new ServiceType("mdts.AlertService", [
    { name: "Create", options: {}, I: CreateAlertRequest, O: AlertResponse },
    { name: "GetById", options: {}, I: GetAlertByIdRequest, O: AlertResponse },
    { name: "GetByPeriod", options: {}, I: GetAlertsByPeriodRequest, O: AlertsResponse },
    { name: "GetAll", options: {}, I: GetAllAlertsRequest, O: AlertsResponse },
    { name: "Update", options: {}, I: UpdateAlertRequest, O: UpdateAlertResponse },
    { name: "Delete", options: {}, I: DeleteAlertRequest, O: DeleteAlertResponse }
]);
/**
 * @generated ServiceType for protobuf service mdts.BplaService
 */
export const BplaService = new ServiceType("mdts.BplaService", [
    { name: "Create", options: {}, I: CreateBplaRequest, O: BplaResponse },
    { name: "GetById", options: {}, I: GetBplaByIdRequest, O: BplaResponse },
    { name: "GetByEntryDateRange", options: {}, I: GetBplaByEntryDateRangeRequest, O: BplasResponse },
    { name: "GetByInUsage", options: {}, I: GetBplaByInUsageRequest, O: BplasResponse },
    { name: "GetByModelAndBrand", options: {}, I: GetBplaByModelAndBrandRequest, O: BplasResponse },
    { name: "GetAll", options: {}, I: GetAllBplasRequest, O: BplasResponse },
    { name: "Update", options: {}, I: UpdateBplaRequest, O: UpdateBplaResponse },
    { name: "Delete", options: {}, I: DeleteBplaRequest, O: DeleteBplaResponse }
]);
