// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "mdts/mdts.proto" (package "mdts", syntax proto3)
// tslint:disable
import { BplaService } from "./mdts";
import type { DeleteBplaResponse } from "./mdts";
import type { DeleteBplaRequest } from "./mdts";
import type { UpdateBplaResponse } from "./mdts";
import type { UpdateBplaRequest } from "./mdts";
import type { GetAllBplasRequest } from "./mdts";
import type { GetBplaByModelAndBrandRequest } from "./mdts";
import type { GetBplaByInUsageRequest } from "./mdts";
import type { BplasResponse } from "./mdts";
import type { GetBplaByEntryDateRangeRequest } from "./mdts";
import type { GetBplaByIdRequest } from "./mdts";
import type { BplaResponse } from "./mdts";
import type { CreateBplaRequest } from "./mdts";
import { AlertService } from "./mdts";
import type { DeleteAlertResponse } from "./mdts";
import type { DeleteAlertRequest } from "./mdts";
import type { UpdateAlertResponse } from "./mdts";
import type { UpdateAlertRequest } from "./mdts";
import type { GetAllAlertsRequest } from "./mdts";
import type { AlertsResponse } from "./mdts";
import type { GetAlertsByPeriodRequest } from "./mdts";
import type { GetAlertByIdRequest } from "./mdts";
import type { AlertResponse } from "./mdts";
import type { CreateAlertRequest } from "./mdts";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./mdts";
import type { DeleteUserResponse } from "./mdts";
import type { DeleteUserRequest } from "./mdts";
import type { UpdateUserResponse } from "./mdts";
import type { UpdateUserRequest } from "./mdts";
import type { UsersResponse } from "./mdts";
import type { GetAllUsersRequest } from "./mdts";
import type { GetUserByUsernameRequest } from "./mdts";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UserResponse } from "./mdts";
import type { GetUserByIdRequest } from "./mdts";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service mdts.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: GetById(mdts.GetUserByIdRequest) returns (mdts.UserResponse);
     */
    getById(input: GetUserByIdRequest, options?: RpcOptions): UnaryCall<GetUserByIdRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: GetByUsername(mdts.GetUserByUsernameRequest) returns (mdts.UserResponse);
     */
    getByUsername(input: GetUserByUsernameRequest, options?: RpcOptions): UnaryCall<GetUserByUsernameRequest, UserResponse>;
    /**
     * @generated from protobuf rpc: GetAll(mdts.GetAllUsersRequest) returns (mdts.UsersResponse);
     */
    getAll(input: GetAllUsersRequest, options?: RpcOptions): UnaryCall<GetAllUsersRequest, UsersResponse>;
    /**
     * @generated from protobuf rpc: Update(mdts.UpdateUserRequest) returns (mdts.UpdateUserResponse);
     */
    update(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse>;
    /**
     * @generated from protobuf rpc: Delete(mdts.DeleteUserRequest) returns (mdts.DeleteUserResponse);
     */
    delete(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse>;
}
/**
 * @generated from protobuf service mdts.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetById(mdts.GetUserByIdRequest) returns (mdts.UserResponse);
     */
    getById(input: GetUserByIdRequest, options?: RpcOptions): UnaryCall<GetUserByIdRequest, UserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserByIdRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetByUsername(mdts.GetUserByUsernameRequest) returns (mdts.UserResponse);
     */
    getByUsername(input: GetUserByUsernameRequest, options?: RpcOptions): UnaryCall<GetUserByUsernameRequest, UserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserByUsernameRequest, UserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAll(mdts.GetAllUsersRequest) returns (mdts.UsersResponse);
     */
    getAll(input: GetAllUsersRequest, options?: RpcOptions): UnaryCall<GetAllUsersRequest, UsersResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllUsersRequest, UsersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(mdts.UpdateUserRequest) returns (mdts.UpdateUserResponse);
     */
    update(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UpdateUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(mdts.DeleteUserRequest) returns (mdts.DeleteUserResponse);
     */
    delete(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserRequest, DeleteUserResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service mdts.AlertService
 */
export interface IAlertServiceClient {
    /**
     * @generated from protobuf rpc: Create(mdts.CreateAlertRequest) returns (mdts.AlertResponse);
     */
    create(input: CreateAlertRequest, options?: RpcOptions): UnaryCall<CreateAlertRequest, AlertResponse>;
    /**
     * @generated from protobuf rpc: GetById(mdts.GetAlertByIdRequest) returns (mdts.AlertResponse);
     */
    getById(input: GetAlertByIdRequest, options?: RpcOptions): UnaryCall<GetAlertByIdRequest, AlertResponse>;
    /**
     * @generated from protobuf rpc: GetByPeriod(mdts.GetAlertsByPeriodRequest) returns (mdts.AlertsResponse);
     */
    getByPeriod(input: GetAlertsByPeriodRequest, options?: RpcOptions): UnaryCall<GetAlertsByPeriodRequest, AlertsResponse>;
    /**
     * @generated from protobuf rpc: GetAll(mdts.GetAllAlertsRequest) returns (mdts.AlertsResponse);
     */
    getAll(input: GetAllAlertsRequest, options?: RpcOptions): UnaryCall<GetAllAlertsRequest, AlertsResponse>;
    /**
     * @generated from protobuf rpc: Update(mdts.UpdateAlertRequest) returns (mdts.UpdateAlertResponse);
     */
    update(input: UpdateAlertRequest, options?: RpcOptions): UnaryCall<UpdateAlertRequest, UpdateAlertResponse>;
    /**
     * @generated from protobuf rpc: Delete(mdts.DeleteAlertRequest) returns (mdts.DeleteAlertResponse);
     */
    delete(input: DeleteAlertRequest, options?: RpcOptions): UnaryCall<DeleteAlertRequest, DeleteAlertResponse>;
}
/**
 * @generated from protobuf service mdts.AlertService
 */
export class AlertServiceClient implements IAlertServiceClient, ServiceInfo {
    typeName = AlertService.typeName;
    methods = AlertService.methods;
    options = AlertService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Create(mdts.CreateAlertRequest) returns (mdts.AlertResponse);
     */
    create(input: CreateAlertRequest, options?: RpcOptions): UnaryCall<CreateAlertRequest, AlertResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAlertRequest, AlertResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetById(mdts.GetAlertByIdRequest) returns (mdts.AlertResponse);
     */
    getById(input: GetAlertByIdRequest, options?: RpcOptions): UnaryCall<GetAlertByIdRequest, AlertResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAlertByIdRequest, AlertResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetByPeriod(mdts.GetAlertsByPeriodRequest) returns (mdts.AlertsResponse);
     */
    getByPeriod(input: GetAlertsByPeriodRequest, options?: RpcOptions): UnaryCall<GetAlertsByPeriodRequest, AlertsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAlertsByPeriodRequest, AlertsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAll(mdts.GetAllAlertsRequest) returns (mdts.AlertsResponse);
     */
    getAll(input: GetAllAlertsRequest, options?: RpcOptions): UnaryCall<GetAllAlertsRequest, AlertsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllAlertsRequest, AlertsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(mdts.UpdateAlertRequest) returns (mdts.UpdateAlertResponse);
     */
    update(input: UpdateAlertRequest, options?: RpcOptions): UnaryCall<UpdateAlertRequest, UpdateAlertResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateAlertRequest, UpdateAlertResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(mdts.DeleteAlertRequest) returns (mdts.DeleteAlertResponse);
     */
    delete(input: DeleteAlertRequest, options?: RpcOptions): UnaryCall<DeleteAlertRequest, DeleteAlertResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteAlertRequest, DeleteAlertResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service mdts.BplaService
 */
export interface IBplaServiceClient {
    /**
     * @generated from protobuf rpc: Create(mdts.CreateBplaRequest) returns (mdts.BplaResponse);
     */
    create(input: CreateBplaRequest, options?: RpcOptions): UnaryCall<CreateBplaRequest, BplaResponse>;
    /**
     * @generated from protobuf rpc: GetById(mdts.GetBplaByIdRequest) returns (mdts.BplaResponse);
     */
    getById(input: GetBplaByIdRequest, options?: RpcOptions): UnaryCall<GetBplaByIdRequest, BplaResponse>;
    /**
     * @generated from protobuf rpc: GetByEntryDateRange(mdts.GetBplaByEntryDateRangeRequest) returns (mdts.BplasResponse);
     */
    getByEntryDateRange(input: GetBplaByEntryDateRangeRequest, options?: RpcOptions): UnaryCall<GetBplaByEntryDateRangeRequest, BplasResponse>;
    /**
     * @generated from protobuf rpc: GetByInUsage(mdts.GetBplaByInUsageRequest) returns (mdts.BplasResponse);
     */
    getByInUsage(input: GetBplaByInUsageRequest, options?: RpcOptions): UnaryCall<GetBplaByInUsageRequest, BplasResponse>;
    /**
     * @generated from protobuf rpc: GetByModelAndBrand(mdts.GetBplaByModelAndBrandRequest) returns (mdts.BplasResponse);
     */
    getByModelAndBrand(input: GetBplaByModelAndBrandRequest, options?: RpcOptions): UnaryCall<GetBplaByModelAndBrandRequest, BplasResponse>;
    /**
     * @generated from protobuf rpc: GetAll(mdts.GetAllBplasRequest) returns (mdts.BplasResponse);
     */
    getAll(input: GetAllBplasRequest, options?: RpcOptions): UnaryCall<GetAllBplasRequest, BplasResponse>;
    /**
     * @generated from protobuf rpc: Update(mdts.UpdateBplaRequest) returns (mdts.UpdateBplaResponse);
     */
    update(input: UpdateBplaRequest, options?: RpcOptions): UnaryCall<UpdateBplaRequest, UpdateBplaResponse>;
    /**
     * @generated from protobuf rpc: Delete(mdts.DeleteBplaRequest) returns (mdts.DeleteBplaResponse);
     */
    delete(input: DeleteBplaRequest, options?: RpcOptions): UnaryCall<DeleteBplaRequest, DeleteBplaResponse>;
}
/**
 * @generated from protobuf service mdts.BplaService
 */
export class BplaServiceClient implements IBplaServiceClient, ServiceInfo {
    typeName = BplaService.typeName;
    methods = BplaService.methods;
    options = BplaService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Create(mdts.CreateBplaRequest) returns (mdts.BplaResponse);
     */
    create(input: CreateBplaRequest, options?: RpcOptions): UnaryCall<CreateBplaRequest, BplaResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateBplaRequest, BplaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetById(mdts.GetBplaByIdRequest) returns (mdts.BplaResponse);
     */
    getById(input: GetBplaByIdRequest, options?: RpcOptions): UnaryCall<GetBplaByIdRequest, BplaResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBplaByIdRequest, BplaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetByEntryDateRange(mdts.GetBplaByEntryDateRangeRequest) returns (mdts.BplasResponse);
     */
    getByEntryDateRange(input: GetBplaByEntryDateRangeRequest, options?: RpcOptions): UnaryCall<GetBplaByEntryDateRangeRequest, BplasResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBplaByEntryDateRangeRequest, BplasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetByInUsage(mdts.GetBplaByInUsageRequest) returns (mdts.BplasResponse);
     */
    getByInUsage(input: GetBplaByInUsageRequest, options?: RpcOptions): UnaryCall<GetBplaByInUsageRequest, BplasResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBplaByInUsageRequest, BplasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetByModelAndBrand(mdts.GetBplaByModelAndBrandRequest) returns (mdts.BplasResponse);
     */
    getByModelAndBrand(input: GetBplaByModelAndBrandRequest, options?: RpcOptions): UnaryCall<GetBplaByModelAndBrandRequest, BplasResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBplaByModelAndBrandRequest, BplasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAll(mdts.GetAllBplasRequest) returns (mdts.BplasResponse);
     */
    getAll(input: GetAllBplasRequest, options?: RpcOptions): UnaryCall<GetAllBplasRequest, BplasResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAllBplasRequest, BplasResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(mdts.UpdateBplaRequest) returns (mdts.UpdateBplaResponse);
     */
    update(input: UpdateBplaRequest, options?: RpcOptions): UnaryCall<UpdateBplaRequest, UpdateBplaResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateBplaRequest, UpdateBplaResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(mdts.DeleteBplaRequest) returns (mdts.DeleteBplaResponse);
     */
    delete(input: DeleteBplaRequest, options?: RpcOptions): UnaryCall<DeleteBplaRequest, DeleteBplaResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteBplaRequest, DeleteBplaResponse>("unary", this._transport, method, opt, input);
    }
}
